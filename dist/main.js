/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_example__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/example */ \"./src/scripts/example.js\");\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const main = document.getElementById('main');\n  new _scripts_example__WEBPACK_IMPORTED_MODULE_0__[\"default\"](main);\n  // console.log(\"Hello World!\")\n\n  // fetchActionMovies()\n});\n\n// async function fetchActionMovies() {\n//     const url = 'https://moviesminidatabase.p.rapidapi.com/movie/byGen/Action/';\n//     const options = {\n//         method: 'GET',\n//         headers: {\n//             'X-RapidAPI-Key': 'acd4d417f3msh22cbb2688691676p165cfcjsn3f566e20b85c',\n//             'X-RapidAPI-Host': 'moviesminidatabase.p.rapidapi.com'\n//         }\n//     };\n\n//     const resultsPerPage = 50; \n//     let pageNumber = 1; \n//     let allResults = []; \n\n//     try {\n//         while (pageNumber <= 47 && allResults.length < 2350) {\n//             const paginatedUrl = `${url}?limit=${resultsPerPage}&page=${pageNumber}`;\n//             const response = await fetch(paginatedUrl, options);\n//             const result = await response.json();\n\n//             allResults = allResults.concat(result); \n//             pageNumber++; \n//         }\n\n//         const filteredResults = allResults.flatMap(hash => {\n//             const entries = Object.entries(hash);\n//             const filteredEntries = entries.filter(([key]) => key.includes('results'));\n//             const filteredHash = Object.fromEntries(filteredEntries);\n//             return Object.values(filteredHash);\n//         });\n\n//         const flattenedResults = filteredResults.flat(1);\n\n//         const imdbIdResults = flattenedResults.reduce((acc, item) => {\n//             if (typeof item === 'object' && item !== null && 'imdb_id' in item) {\n//                 acc.push(item['imdb_id']);\n//             }\n//             return acc;\n//         }, []);\n\n//         console.log(imdbIdResults);\n//     } catch (error) {\n//         console.error(error);\n//     }\n// }\n\n//   const fetchRatings = async () => {\n//     const url = 'https://moviesminidatabase.p.rapidapi.com/movie/id/';\n//     const options = {\n//       method: 'GET',\n//       headers: {\n//         'X-RapidAPI-Key': 'acd4d417f3msh22cbb2688691676p165cfcjsn3f566e20b85c',\n//         'X-RapidAPI-Host': 'moviesminidatabase.p.rapidapi.com'\n//       }\n//     };\n\n//     const imdbIdResults = await fetchActionMovies(); \n\n//     try {\n//         let newArr = []\n//        for (let i = 0; i < imdbIdResults.length; i++) {\n//             const ratingUrl = `${url}${imdbIdResults[i]}/`;\n//             const response = await fetch(ratingUrl, options)\n//             const result = await response.json()\n//             newArr.push(result)\n//         }\n//         console.log(newArr)\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   fetchRatings()//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBd0M7QUFHeENDLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtFQUdoRCxNQUFNQyxJQUFJLEdBQUdGLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLE1BQU0sQ0FBQztFQUM1QyxJQUFJSix3REFBTyxDQUFDRyxJQUFJLENBQUM7RUFDakI7O0VBRUE7QUFDSixDQUFDLENBQUM7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamF2YXNjcmlwdHByb2plY3QvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXhhbXBsZSBmcm9tICcuL3NjcmlwdHMvZXhhbXBsZSc7XG5cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcblxuXG4gICAgY29uc3QgbWFpbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluJylcbiAgICBuZXcgRXhhbXBsZShtYWluKVxuICAgIC8vIGNvbnNvbGUubG9nKFwiSGVsbG8gV29ybGQhXCIpXG5cbiAgICAvLyBmZXRjaEFjdGlvbk1vdmllcygpXG59KVxuXG4vLyBhc3luYyBmdW5jdGlvbiBmZXRjaEFjdGlvbk1vdmllcygpIHtcbi8vICAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly9tb3ZpZXNtaW5pZGF0YWJhc2UucC5yYXBpZGFwaS5jb20vbW92aWUvYnlHZW4vQWN0aW9uLyc7XG4vLyAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbi8vICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbi8vICAgICAgICAgaGVhZGVyczoge1xuLy8gICAgICAgICAgICAgJ1gtUmFwaWRBUEktS2V5JzogJ2FjZDRkNDE3ZjNtc2gyMmNiYjI2ODg2OTE2NzZwMTY1Y2ZjanNuM2Y1NjZlMjBiODVjJyxcbi8vICAgICAgICAgICAgICdYLVJhcGlkQVBJLUhvc3QnOiAnbW92aWVzbWluaWRhdGFiYXNlLnAucmFwaWRhcGkuY29tJ1xuLy8gICAgICAgICB9XG4vLyAgICAgfTtcblxuLy8gICAgIGNvbnN0IHJlc3VsdHNQZXJQYWdlID0gNTA7IFxuLy8gICAgIGxldCBwYWdlTnVtYmVyID0gMTsgXG4vLyAgICAgbGV0IGFsbFJlc3VsdHMgPSBbXTsgXG5cbi8vICAgICB0cnkge1xuLy8gICAgICAgICB3aGlsZSAocGFnZU51bWJlciA8PSA0NyAmJiBhbGxSZXN1bHRzLmxlbmd0aCA8IDIzNTApIHtcbi8vICAgICAgICAgICAgIGNvbnN0IHBhZ2luYXRlZFVybCA9IGAke3VybH0/bGltaXQ9JHtyZXN1bHRzUGVyUGFnZX0mcGFnZT0ke3BhZ2VOdW1iZXJ9YDtcbi8vICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocGFnaW5hdGVkVXJsLCBvcHRpb25zKTtcbi8vICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuLy8gICAgICAgICAgICAgYWxsUmVzdWx0cyA9IGFsbFJlc3VsdHMuY29uY2F0KHJlc3VsdCk7IFxuLy8gICAgICAgICAgICAgcGFnZU51bWJlcisrOyBcbi8vICAgICAgICAgfVxuXG4vLyAgICAgICAgIGNvbnN0IGZpbHRlcmVkUmVzdWx0cyA9IGFsbFJlc3VsdHMuZmxhdE1hcChoYXNoID0+IHtcbi8vICAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhoYXNoKTtcbi8vICAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkRW50cmllcyA9IGVudHJpZXMuZmlsdGVyKChba2V5XSkgPT4ga2V5LmluY2x1ZGVzKCdyZXN1bHRzJykpO1xuLy8gICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRIYXNoID0gT2JqZWN0LmZyb21FbnRyaWVzKGZpbHRlcmVkRW50cmllcyk7XG4vLyAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhmaWx0ZXJlZEhhc2gpO1xuLy8gICAgICAgICB9KTtcblxuLy8gICAgICAgICBjb25zdCBmbGF0dGVuZWRSZXN1bHRzID0gZmlsdGVyZWRSZXN1bHRzLmZsYXQoMSk7XG5cbi8vICAgICAgICAgY29uc3QgaW1kYklkUmVzdWx0cyA9IGZsYXR0ZW5lZFJlc3VsdHMucmVkdWNlKChhY2MsIGl0ZW0pID0+IHtcbi8vICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbSAhPT0gbnVsbCAmJiAnaW1kYl9pZCcgaW4gaXRlbSkge1xuLy8gICAgICAgICAgICAgICAgIGFjYy5wdXNoKGl0ZW1bJ2ltZGJfaWQnXSk7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICByZXR1cm4gYWNjO1xuLy8gICAgICAgICB9LCBbXSk7XG4gICAgICAgIFxuLy8gICAgICAgICBjb25zb2xlLmxvZyhpbWRiSWRSZXN1bHRzKTtcbi8vICAgICB9IGNhdGNoIChlcnJvcikge1xuLy8gICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbi8vICAgICB9XG4vLyB9XG5cblxuLy8gICBjb25zdCBmZXRjaFJhdGluZ3MgPSBhc3luYyAoKSA9PiB7XG4vLyAgICAgY29uc3QgdXJsID0gJ2h0dHBzOi8vbW92aWVzbWluaWRhdGFiYXNlLnAucmFwaWRhcGkuY29tL21vdmllL2lkLyc7XG4vLyAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbi8vICAgICAgIG1ldGhvZDogJ0dFVCcsXG4vLyAgICAgICBoZWFkZXJzOiB7XG4vLyAgICAgICAgICdYLVJhcGlkQVBJLUtleSc6ICdhY2Q0ZDQxN2YzbXNoMjJjYmIyNjg4NjkxNjc2cDE2NWNmY2pzbjNmNTY2ZTIwYjg1YycsXG4vLyAgICAgICAgICdYLVJhcGlkQVBJLUhvc3QnOiAnbW92aWVzbWluaWRhdGFiYXNlLnAucmFwaWRhcGkuY29tJ1xuLy8gICAgICAgfVxuLy8gICAgIH07XG4gIFxuLy8gICAgIGNvbnN0IGltZGJJZFJlc3VsdHMgPSBhd2FpdCBmZXRjaEFjdGlvbk1vdmllcygpOyBcblxuLy8gICAgIHRyeSB7XG4vLyAgICAgICAgIGxldCBuZXdBcnIgPSBbXVxuLy8gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW1kYklkUmVzdWx0cy5sZW5ndGg7IGkrKykge1xuLy8gICAgICAgICAgICAgY29uc3QgcmF0aW5nVXJsID0gYCR7dXJsfSR7aW1kYklkUmVzdWx0c1tpXX0vYDtcbi8vICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocmF0aW5nVXJsLCBvcHRpb25zKVxuLy8gICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4vLyAgICAgICAgICAgICBuZXdBcnIucHVzaChyZXN1bHQpXG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgY29uc29sZS5sb2cobmV3QXJyKVxuLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4vLyAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbi8vICAgICB9XG4vLyAgIH07XG5cblxuLy8gICBmZXRjaFJhdGluZ3MoKVxuICAiXSwibmFtZXMiOlsiRXhhbXBsZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1haW4iLCJnZXRFbGVtZW50QnlJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/example.js":
/*!********************************!*\
  !*** ./src/scripts/example.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Example {\n  constructor(ele) {\n    this.ele = ele;\n    this.ele.innerHTML = \"<h1>It's ALIVE!!!</h1>\";\n    this.handleClick = this.handleClick.bind(this);\n    this.ele.addEventListener('click', this.handleClick);\n    console.log(this.fetchAllMovies());\n  }\n  handleClick() {\n    this.ele.children[0].innerText = \"Ouch!\";\n  }\n  async fetchAllMovies() {\n    const url = 'https://imdb-top-100-movies.p.rapidapi.com/';\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': 'acd4d417f3msh22cbb2688691676p165cfcjsn3f566e20b85c',\n        'X-RapidAPI-Host': 'imdb-top-100-movies.p.rapidapi.com'\n      }\n    };\n    try {\n      const response = await fetch(url, options);\n      const result = await response.json();\n      let hash = {};\n      result.forEach(ele => {\n        if (!hash[ele[\"genre\"]]) {\n          hash[ele[\"genre\"]] = [ele[\"title\"]];\n        } else {\n          hash[ele[\"genre\"]].push(ele[\"title\"]);\n        }\n      });\n      console.log(hash);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Example);\n\n// async fetchAllMovies() {\n//     const url = 'https://imdb-top-100-movies.p.rapidapi.com/';\n//     const options = {\n//         method: 'GET',\n//         headers: {\n//             'X-RapidAPI-Key': 'acd4d417f3msh22cbb2688691676p165cfcjsn3f566e20b85c',\n//             'X-RapidAPI-Host': 'imdb-top-100-movies.p.rapidapi.com'\n//         }\n//     };\n\n//     try {\n//         const response = await fetch(url, options);\n//         const result = await response.text();\n//         console.log(result);\n//     } catch (error) {\n//         console.error(error);\n//     }\n// }\n// async fetchActionMovies() {\n//     const url = 'https://moviesminidatabase.p.rapidapi.com/movie/byGen/Action/';\n//     const options = {\n//         method: 'GET',\n//         headers: {\n//             'X-RapidAPI-Key': 'acd4d417f3msh22cbb2688691676p165cfcjsn3f566e20b85c',\n//             'X-RapidAPI-Host': 'moviesminidatabase.p.rapidapi.com'\n//         }\n//     };\n\n//     const resultsPerPage = 50; \n//     let pageNumber = 1; \n//     let allResults = []; \n\n//     try {\n//         while (pageNumber <= 47 && allResults.length < 2350) {\n//             const paginatedUrl = `${url}?limit=${resultsPerPage}&page=${pageNumber}`;\n//             const response = await fetch(paginatedUrl, options);\n//             const result = await response.json();\n\n//             allResults = allResults.concat(result); \n//             pageNumber++; \n//         }\n\n//         const filteredResults = allResults.flatMap(hash => {\n//             const entries = Object.entries(hash);\n//             const filteredEntries = entries.filter(([key]) => key.includes('results'));\n//             const filteredHash = Object.fromEntries(filteredEntries);\n//             return Object.values(filteredHash);\n//         });\n\n//         const flattenedResults = filteredResults.flat(1);\n\n//         const imdbIdResults = flattenedResults.reduce((acc, item) => {\n//             if (typeof item === 'object' && item !== null && 'imdb_id' in item) {\n//                 acc.push(item['imdb_id']);\n//             }\n//             return acc;\n//         }, []);\n\n//         console.log(imdbIdResults);\n//         return imdbIdResults;\n\n//     } catch (error) {\n//         console.error(error);\n//     }\n// }\n\n// async fetchRatings() {\n//     const url = 'https://moviesminidatabase.p.rapidapi.com/movie/id/';\n//     const options = {\n//     method: 'GET',\n//     headers: {\n//         'X-RapidAPI-Key': 'acd4d417f3msh22cbb2688691676p165cfcjsn3f566e20b85c',\n//         'X-RapidAPI-Host': 'moviesminidatabase.p.rapidapi.com'\n//     }\n//     };\n\n//     const imdbIdResults = await this.fetchActionMovies(); \n//     // console.log(Array.isArray(imdbIdResults))\n//     try {\n//         let newArr = []\n//     for (let i = 0; i < imdbIdResults.length; i++) {\n//             const ratingUrl = `${url}${imdbIdResults[i]}/`;\n//             const response = await fetch(ratingUrl, options)\n//             const result = await response.json()\n//             newArr.push(result)\n//         }\n//         const filteredRatings = newArr.flatMap(hash => {\n//             const entries = Object.entries(hash);\n//             const filteredEntries = entries.filter(([key]) => key.includes('results'));\n//             const filteredHash = Object.fromEntries(filteredEntries);\n//             return Object.values(filteredHash);\n//         });\n//         console.log(filteredRatings)\n//     } catch (error) {\n//     console.error(error);\n//     }\n// };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/example.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0cHJvamVjdC8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;